---
subcategory: "Vulnerability Exceptions"
layout: "lacework"
page_title: "Lacework: lacework_vulnerability_exception_container"
description: |-
  Create and manage Lacework vulnerability exceptions for containers
---

# lacework\_vulnerability\_exception\_container

Use this resource to manage Lacework vulnerability exceptions to control and customize your alert
profile for containers, such as for a particular vulnerability in a container registry. Customize
your exceptions by defining the resource scope, vulnerability criteria, and context for each exception.

## Example Usage

```hcl
resource "lacework_vulnerability_exception_container" "example" {
  name        = "My Vuln Exception"
  description = "This is a container vulnerability exception"
  enabled     = true
  reason      = "Accepted Risk"
  expiry      = "2023-06-06T15:55:15Z"
  vulnerability_criteria {
    severities   = ["Critical", "High"]
    cves         = ["cve-2021-11111", "cve-2021-22222"]
    fixable_vuln = "true"
    package {
      name    = "myPackage"
      version = "1.0.0"
    }
    package {
      name = "myOtherPackage"
      version = "1.0.0"
    }
  }
  resource_scope {
    image_ids    = ["sha256:3b83d9104a4c4ccf76433756f14a2ad109e2aae15444b63339"]
    image_tags   = ["4.0", "1.0", "3.1", "5.0"]
    namespaces   = ["debian"]
    registries   = ["index.docker.io"]
    repositories = ["lacework/lacework-cli"]
  }
}
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The vulnerability exception name.
* `vulnerability_criteria` - (Required) The criteria of the vulnerability to be excluded.
  See [Vulnerability Criteria](#vulnerability-criteria) below for details.
* `description` - (Optional) The description of the vulnerability exception.
* `enabled` - (Optional) The state of the vulnerability exception. Defaults to `true`.
* `expiry` - (Optional) The expiration date of the vulnerability exception. Example: `2022-06-01T16:35:00Z`.
* `resource_scope` - (Optional) Define which resources will be affected by the exclusion. See
  [Resource Scope](#resource-scope) below for details.
* `reason` - (Optional) The reason for the exception to exist. Valid reasons include: `Accepted Risk`,
  `False Positive`, `Compensating Controls`, `Fix Pending` and `Other`. See
  [Vulnerability Exceptions Use Cases](https://docs.lacework.com/console/vulnerability-exceptions-overview)
  for more details.

### Vulnerability Criteria

`vulnerability_criteria` supports the following arguments:

* `severities` - (Optional) The list of severities to which the exception will be constraint. Valid severities
  include: `Critical`, `High`, `Medium`, `Low` and `Info`.
* `cves` - (Optional) The list of vulnerability (CVE) IDs.
* `package` - (Optional) The list of package names (for example, an operating system or language package) to constraint.
* `fixable_vuln` - (Optional) Whether to filter on fixable or non-fixable vulnerability. This argument is of type
  `string`. Valid values are: `"true"`, `"false"`.

### Resource Scope

`resource_scope` supports the following arguments:

* `image_ids` - (Optional) The list of sha256 hashes that was generated for one or more container images.
* `image_tags` - (Optional) The list of container image tags.
* `registries` - (Optional) The list of container registries.
* `repositories` - (Optional) The list of container repositories.
* `namespaces` - (Optional) The list of namespace for the package distribution (for example, an operating
  system or language package). 

## Import

A Lacework vulnerability wxception for containers can be imported using a `GUID`, e.g.

```
$ terraform import lacework_vulnerability_exception_container.example EXAMPLE_1234BAE1E42182964D23973F44CFEA3C4AB63B99E9A1EC5
```
-> **Note:** To retrieve the `GUID` from existing vulnerability exception in your account, use
the Lacework CLI command `lacework vulnerability-exception list`. To install this tool follow
[this documentation](https://docs.lacework.com/cli/).
