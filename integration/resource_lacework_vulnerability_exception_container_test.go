package integration

import (
	"testing"

	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

// TestVulnerabilityExceptionContainerCreate applies integration terraform:
// => '../examples/resource_lacework_vulnerability_exception_container'
//
// It uses the go-sdk to verify the created vulnerability exception,
// applies an update and destroys it
//nolint
func TestVulnerabilityExceptionContainerCreate(t *testing.T) {
	terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
		TerraformDir: "../examples/resource_lacework_vulnerability_exception_container",
		EnvVars:      tokenEnvVar,
		Vars: map[string]interface{}{
			"name":            "Terraform Vulnerability Exception Container Test",
			"description":     "Vulnerability Exception Container created by Terraform",
			"cves":            []string{"CVE-2016-9840", "CVE-2018-14599", "CVE-2018-6942"},
			"package_name":    "myPackage",
			"package_version": "1.0.0",
		},
	})
	defer terraform.Destroy(t, terraformOptions)

	// Create new Vulnerability Exception
	create := terraform.InitAndApplyAndIdempotent(t, terraformOptions)
	createProps := GetVulnerabilityExceptionProps(create)

	actualDescription := terraform.Output(t, terraformOptions, "description")
	actualCves := terraform.Output(t, terraformOptions, "cves")
	actualPackages := terraform.Output(t, terraformOptions, "packages")

	assert.Equal(t, "Vulnerability Exception Container created by Terraform", createProps.Data.Props.Description)
	assert.Equal(t, []string{"CVE-2016-9840", "CVE-2018-14599", "CVE-2018-6942"}, createProps.Data.VulnerabilityCriteria.Cve)
	assert.Equal(t, []map[string][]string{{"myPackage": {"1.0.0"}}, {"adm-zip": {"0.4.7"}}}, createProps.Data.VulnerabilityCriteria.Package)

	assert.Equal(t, "Vulnerability Exception Container created by Terraform", actualDescription)
	assert.Equal(t, "[CVE-2016-9840 CVE-2018-14599 CVE-2018-6942]", actualCves)
	assert.Equal(t, "[map[name:adm-zip version:0.4.7] map[name:myPackage version:1.0.0]]", actualPackages)

	// Update Vulnerability Exception
	terraformOptions.Vars = map[string]interface{}{
		"name":            "Terraform Vulnerability Exception Container Test",
		"description":     "Updated Vulnerability Exception created by Terraform",
		"cves":            []string{"CVE-2016-9840", "CVE-2018-6940"},
		"package_name":    "myUpdatedPackage",
		"package_version": "1.1.0",
	}

	update := terraform.ApplyAndIdempotent(t, terraformOptions)
	updateProps := GetVulnerabilityExceptionProps(update)
	actualDescription = terraform.Output(t, terraformOptions, "description")
	actualCves = terraform.Output(t, terraformOptions, "cves")
	actualPackages = terraform.Output(t, terraformOptions, "packages")

	assert.Equal(t, "Updated Vulnerability Exception created by Terraform", updateProps.Data.Props.Description)
	assert.Equal(t, []string{"CVE-2016-9840", "CVE-2018-6940"}, updateProps.Data.VulnerabilityCriteria.Cve)
	assert.Equal(t, []map[string][]string{{"myUpdatedPackage": {"1.1.0"}}, {"adm-zip": {"0.4.7"}}}, updateProps.Data.VulnerabilityCriteria.Package)

	assert.Equal(t, "Updated Vulnerability Exception created by Terraform", actualDescription)
	assert.Equal(t, "[CVE-2016-9840 CVE-2018-6940]", actualCves)
	assert.Equal(t, "[map[name:adm-zip version:0.4.7] map[name:myUpdatedPackage version:1.1.0]]", actualPackages)
}
